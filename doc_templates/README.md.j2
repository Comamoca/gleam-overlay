<div align="center">

![Last commit](https://img.shields.io/github/last-commit/Comamoca/gleam-overlay?style=flat-square)
![Repository Stars](https://img.shields.io/github/stars/Comamoca/gleam-overlay?style=flat-square)
![Issues](https://img.shields.io/github/issues/Comamoca/gleam-overlay?style=flat-square)
![Open Issues](https://img.shields.io/github/issues-raw/Comamoca/gleam-overlay?style=flat-square)
![Bug Issues](https://img.shields.io/github/issues/Comamoca/gleam-overlay/bug?style=flat-square)

<img src="https://gleam.run/images/lucy/lucy.svg" alt="gleam logo" height="100">

# gleam-overlay

A Nix overlay providing [Gleam](https://gleam.run/) packages for multiple versions and platforms.

</div>

## ✨ Features

- 🚀 Latest Gleam releases with automatic updates
- 🏗️ Multiple architecture support (x86_64/aarch64 Linux/macOS)
- 📦 Easy integration with Nix flakes and traditional overlays
- 🔄 Binary distributions for faster installation

## 🚀 Usage

### With Nix Flakes

Add this overlay to your flake inputs:

```nix
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    gleam-overlay = {
      url = "github:Comamoca/gleam-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, gleam-overlay }: {
    devShells.default = nixpkgs.legacyPackages.x86_64-linux.mkShell {
      buildInputs = [
        gleam-overlay.packages.x86_64-linux.default  # Latest version
      ];
    };
  };
}
```

### With Traditional Overlays

```nix
let
  gleam-overlay = import (fetchTarball "https://github.com/Comamoca/gleam-overlay/archive/main.tar.gz");
  pkgs = import <nixpkgs> { overlays = [ gleam-overlay ]; };
in
{
  environment.systemPackages = [
    pkgs.gleamPackage.bin.latest
  ];
}
```

### Direct Usage

```sh
# Run the latest version
nix run github:Comamoca/gleam-overlay

# Use in a shell
nix shell github:Comamoca/gleam-overlay
```

## 🏗️ Supported Platforms

{{ platforms_list }}

## 📋 Version & Platform Compatibility

{{ platform_version_matrix }}

## ⛏️ Development

### Prerequisites

```sh
nix develop
# or
direnv allow
```

### Updating Releases

```sh
cd scripts
python fetch_gleam_releases.py
```

This will update `gleam_hashes.json` with the latest Gleam releases and their checksums.

### Building Manually

```sh
# Build the latest version
nix build

# Build and test
nix flake check
```

## 📜 License

MIT License - see [LICENSE](LICENSE) for details.

## 🙏 Acknowledgments

- [Gleam](https://gleam.run/) - A friendly language for building type-safe, scalable systems
- The Nix community for excellent tooling and patterns